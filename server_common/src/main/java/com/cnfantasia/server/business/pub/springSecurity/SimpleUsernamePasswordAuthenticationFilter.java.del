package com.cnfantasia.server.api.pub.springSecurity;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.cnfantasia.server.api.pub.constant.FocConstants;
import com.cnfantasia.server.api.pub.entity.SysUser;
import com.cnfantasia.server.api.pub.service.ISecurityService;
  
  
/**UsernamePasswordAuthenticationFilter源码 
    attemptAuthentication 
        this.getAuthenticationManager() 
            ProviderManager.java 
                authenticate(UsernamePasswordAuthenticationToken authRequest) 
                    AbstractUserDetailsAuthenticationProvider.java 
                        authenticate(Authentication authentication) 
                            P155 user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication); 
                                DaoAuthenticationProvider.java 
                                    P86 loadUserByUsername
 */
public class SimpleUsernamePasswordAuthenticationFilter extends UsernamePasswordAuthenticationFilter{  
    public static final String VALIDATE_CODE_SESSION = "_rand";
    public static final String VALIDATE_CODE_PARAM = "rand";
    public static final String USERNAME = "number";
    public static final String PASSWORD = "password";
//    public static final String LOGIN_TYPE_SESSION = "_loginType";
    public static final String LOGIN_TYPE_PARAM = "loginType";
    private IEncode encoder;
    public void setEncoder(IEncode encoder) {
      this.encoder = encoder;
    }

    private ISecurityService securityService;  
		public void setSecurityService(ISecurityService securityService) {
			this.securityService = securityService;
		}
		
		@Override  
    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {  
//        if (!request.getMethod().equals("POST")) {  
//            throw new AuthenticationServiceException("Authentication method not supported: " + request.getMethod());  
//        }  
        //检测验证码  
//        checkValidateCode(request);  
          
        String username = obtainUsername(request);  
        String password = obtainPassword(request); 
        Long loginType = obtainLoginTypeParameter(request);
        //验证用户账号与密码是否对应  
        username = username.trim();  
//        String enCodepassword=encoder.encodePassword(password,username);
        String enCodepassword=password;//TODO 暂不作加密处理
        
        SysUser users = this.securityService.getUserByUserName(username,loginType); 
        if(users == null ||users.getLoginNoEntity()==null|| !users.getPassword().equals(enCodepassword)) {  
//        /*
//         * 在我们配置的simpleUrlAuthenticationFailureHandler处理登录失败的处理类在这么一段
//         * 这样我们可以在登录失败后，向用户提供相应的信息。  
//         */
//          if (forwardToDestination) { 
//              request.setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION, exception); 
//          } else { 
//              HttpSession session = request.getSession(false); 
//   
//              if (session != null || getAllowSessionCreation()) { 
//                  request.getSession().setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION, exception); 
//              } 
//          }
          HttpSession session = request.getSession();  
          String errCode= "user.logn.userNamePwdError";
          session.setAttribute(FocConstants.ERRCODE, errCode);
          throw new AuthenticationServiceException(errCode);   
        }  
        
        //UsernamePasswordAuthenticationToken实现 Authentication  
        UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username, password);  
        // Place the last username attempted into HttpSession for views  
          
        // 允许子类设置详细属性  
        setDetails(request, authRequest);  
          
        // 运行UserDetailsService的loadUserByUsername 再次封装Authentication  
        return this.getAuthenticationManager().authenticate(authRequest); 
    }
      
    protected void checkValidateCode(HttpServletRequest request) {
        HttpSession session = request.getSession();  
        String sessionValidateCode = obtainSessionValidateCode(session);   
        //让上一次的验证码失效  
        session.setAttribute(VALIDATE_CODE_SESSION, null);  
        String valCodeParam = obtainValidateCodeParameter(request);
        if (valCodeParam==null||valCodeParam.trim().length()<=0|| !sessionValidateCode.equalsIgnoreCase(valCodeParam)) {
          String errCode= "user.logn.randError";
          session.setAttribute(FocConstants.ERRCODE, errCode);
          throw new AuthenticationServiceException(errCode);   
        }else{
          session.removeAttribute(FocConstants.ERRCODE);//移除errInfo
          session.setAttribute(FocConstants.Logn_Session_LoginName, request.getParameter(USERNAME));//保存登陆用户名
        }
    }  
    
    private Long obtainLoginTypeParameter(HttpServletRequest request) {  
      Object obj = request.getParameter(LOGIN_TYPE_PARAM);  
      return null == obj ? null : Long.parseLong(obj.toString());  
    }
    private String obtainValidateCodeParameter(HttpServletRequest request) {  
        Object obj = request.getParameter(VALIDATE_CODE_PARAM);  
        return null == obj ? "" : obj.toString();  
    }  
  
    protected String obtainSessionValidateCode(HttpSession session) {  
        Object obj = session.getAttribute(VALIDATE_CODE_SESSION);  
        return null == obj ? "" : obj.toString();  
    }  
  
    @Override  
    protected String obtainUsername(HttpServletRequest request) {  
        Object obj = request.getParameter(USERNAME);  
        return null == obj ? "" : obj.toString();  
    }  
  
    @Override  
    protected String obtainPassword(HttpServletRequest request) {  
        Object obj = request.getParameter(PASSWORD);  
        return null == obj ? "" : obj.toString();  
    }  
      
      
}  