package com.cnfantasia.server.domainbase.taskLogger.entity;/* */ import com.cnfantasia.server.domain.pub.BaseEntity;import java.io.Serializable;/* */import java.math.BigInteger;import java.lang.String;import java.lang.Long;import java.lang.Integer;/*  import com.cnfantasia.server.domain.pub.BaseEntity; *//** * 描述:(job记录表) 实体类 *  * @version 1.00 * @author null *  *//* */public class TaskLogger  extends BaseEntity {/* *//* public class TaskLogger extends BaseEntity{ */	private static final long serialVersionUID = 1L;	/**  */	private BigInteger id;	/** className */	private String className;	/** 执行方法 */	private String methodName;	/** 是否为未处理的异常 */	private Integer isUndefinedException;	/** 异常堆栈信息 */	private String excepStackInfo;	/** 执行开始时间 */	private String taskStartTime;	/** 执行开始时间 */	private String taskEndTime;	/** 请求处理时间,毫秒 */	private Long dealTime;	public TaskLogger(){	}	public TaskLogger(TaskLogger arg){		this.id = arg.getId();		this.className = arg.getClassName();		this.methodName = arg.getMethodName();		this.isUndefinedException = arg.getIsUndefinedException();		this.excepStackInfo = arg.getExcepStackInfo();		this.taskStartTime = arg.getTaskStartTime();		this.taskEndTime = arg.getTaskEndTime();		this.dealTime = arg.getDealTime();		this.sys0AddTime = arg.getSys0AddTime();	}	/**	 * 	 * @param id 	 * @param className className	 * @param methodName 执行方法	 * @param isUndefinedException 是否为未处理的异常	 * @param excepStackInfo 异常堆栈信息	 * @param taskStartTime 执行开始时间	 * @param taskEndTime 执行开始时间	 * @param dealTime 请求处理时间,毫秒	 * @param sys0AddTime 新增时间	 */	public TaskLogger(BigInteger id,String className,String methodName,Integer isUndefinedException,String excepStackInfo,String taskStartTime,String taskEndTime,Long dealTime,String sys0AddTime){		this.id = id;		this.className = className;		this.methodName = methodName;		this.isUndefinedException = isUndefinedException;		this.excepStackInfo = excepStackInfo;		this.taskStartTime = taskStartTime;		this.taskEndTime = taskEndTime;		this.dealTime = dealTime;		this.sys0AddTime = sys0AddTime;	}	@Override	public String toString() {		StringBuffer sbf = new StringBuffer();		sbf.append("id=").append(id).append(";");		sbf.append("className=").append(className).append(";");		sbf.append("methodName=").append(methodName).append(";");		sbf.append("isUndefinedException=").append(isUndefinedException).append(";");		sbf.append("excepStackInfo=").append(excepStackInfo).append(";");		sbf.append("taskStartTime=").append(taskStartTime).append(";");		sbf.append("taskEndTime=").append(taskEndTime).append(";");		sbf.append("dealTime=").append(dealTime).append(";");		sbf.append("sys0AddTime=").append(sys0AddTime).append(";");		return sbf.toString();	}		public BigInteger getId() {		return id;	}	public void setId(BigInteger id) {		this.id = id;	}	public String getClassName() {		return className;	}	public void setClassName(String className) {		this.className = className;	}	public String getMethodName() {		return methodName;	}	public void setMethodName(String methodName) {		this.methodName = methodName;	}	public Integer getIsUndefinedException() {		return isUndefinedException;	}	public void setIsUndefinedException(Integer isUndefinedException) {		this.isUndefinedException = isUndefinedException;	}	public String getExcepStackInfo() {		return excepStackInfo;	}	public void setExcepStackInfo(String excepStackInfo) {		this.excepStackInfo = excepStackInfo;	}	public String getTaskStartTime() {		return taskStartTime;	}	public void setTaskStartTime(String taskStartTime) {		this.taskStartTime = taskStartTime;	}	public String getTaskEndTime() {		return taskEndTime;	}	public void setTaskEndTime(String taskEndTime) {		this.taskEndTime = taskEndTime;	}	public Long getDealTime() {		return dealTime;	}	public void setDealTime(Long dealTime) {		this.dealTime = dealTime;	}		@Override	public int hashCode() {		final int prime = 31;		int result = 1;		result = prime * result + ((id == null) ? 0 : id.hashCode());		return result;	}		@Override	public boolean equals(Object obj) {		if (this == obj)			return true;		if (obj == null)			return false;		if (getClass() != obj.getClass())			return false;		TaskLogger other = (TaskLogger) obj;		if (id == null) {			if (other.id != null)				return false;		} else if (!id.equals(other.id))			return false;		return true;	}	}